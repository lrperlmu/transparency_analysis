intervals(lme2b)
sleepstudy
predict(lme2a, newdata = data.frame(DaysC = 0:9 - 4.5))
names(sleepstudy)
predict(lme2a, newdata = data.frame(DaysC = 0:9 - 4.5, Subject = "ken_rice"))
predict(lme2a, newdata = data.frame(DaysC = 0:9 - 4.5, Subject = 330))
predict(lme2a, newdata = data.frame(DaysC = 0:9 - 4.5, Subject = 330000))
intervals(lme2a)
coeffs = intervals(lme2a)
coeffs$fixed
coeffs$fixed["est."]
coeffs$fixed[["est."]]
coeffs$fixed[[1]]
coeffs$fixed
coeffs$fixed[, 2]
intervals(lme2a)
intervals(lme2a)$random
vars = intervals(lme2a)
intervals(lme2a)$sigma
intervals(lme2a)
intervals(lme2a)[[2]]
intervals(lme2a)
ranef_var = intervals(lme2a)[[2]][, 2]
intervals(lme2a)[[2]]
dim(intervals(lme2a)[[2]])
typeof(intervals(lme2a)[[2]])
typeof(intervals(lme2a)[[2]][[1]])
intervals(lme2a)[[2]][[1]]
intervals(lme2a)[[2]][[1]]["est."]
ranef_var = intervals(lme2a)[[2]][[1]]["est."]^2
ranef_var
res_var = intervals(lme2a)$sigma[, 2]
intervals
intervals(lme2a)$sigma
intervals(lme2a)
typeof(lme2a)
attr(lme2a)
lme2a
intervals(lme2a)$sigma
print(lme2a)
intervals(lme2a)$sigma
rm(list = ls())
library("lme4") # contains the sleepstudy data
library("nlme")
lme2a   <- lme(Reaction ~ DaysC,
random=reStruct(~DaysC|Subject, pdClass="pdDiag"),
data=sleepstudy)
intervals(lme2a)$sigma
rm(list = ls())
library("lme4") # contains the sleepstudy data
library("nlme")
sleepstudy$DaysC <- with(sleepstudy, Days - mean(Days)) # centering
lme2a   <- lme(Reaction ~ DaysC,
random=reStruct(~DaysC|Subject, pdClass="pdDiag"),
data=sleepstudy)
intervals(lme2a)$sigma
library("lme4") # contains the sleepstudy data
library("nlme")
sleepstudy$DaysC <- with(sleepstudy, Days - mean(Days)) # centering
lme2a   <- lme(Reaction ~ DaysC,
random=reStruct(~DaysC|Subject, pdClass="pdDiag"),
data=sleepstudy)
intervals(lme2a)$sigma
print(lme2a)
coeffs = intervals(lme2a)$fixed[, 2]
res_var = intervals(lme2a)$ ^ 2
coeffs = intervals(lme2a)$fixed[, 2]
res_var = intervals(lme2a)$sigma ^ 2
ranef_var = intervals(lme2a)[[2]][[1]]["est."]^2
res_var
res_var = intervals(lme2a)$sigma["est."] ^ 2
res_var
coeffs = intervals(lme2a)$fixed[, 2]
coeffs
ranef_var = intervals(lme2a)[[2]][[1]]["est."]^2
ranef_var
ranef_var = intervals(lme2a)[[2]][[1]]["est."]^2 ; names(ranef_var) = c("int", "slp")
ranef_var
intervals(lme2a)[[2]][[1]]["est."]
c(intervals(lme2a)[[2]][[1]]["est."])
c(intervals(lme2a)[[2]][[1]]["est."])
c(intervals(lme2a)[[2]][[1]]["est."])$est.
ranef_var = c(intervals(lme2a)[[2]][[1]]["est."])$est.^2 ;
ranef_var
res_var = intervals(lme2a)$sigma["est."] ^ 2
res_var
res_var = c(intervals(lme2a)$sigma["est."]$est.) ^ 2
res_var = c(intervals(lme2a)$sigma["est."])$est. ^ 2
res_var = intervals(lme2a)$sigma["est."]$est. ^ 2
res_var = intervals(lme2a)$sigma["est."] ^ 2
res_var
require(ggplot2)
pred_q_hi = mean_est + 1.96*sqrt(vars_est)
pred_q_lo = mean_est - 1.96*sqrt(vars_est)
DaysC = 0:9 - 4.5
mean_est = coeffs[1]    + coeffs[2]    * DaysC
vars_est = ranef_var[1] + ranef_var[2] * DaysC ^ 2 + res_var
pred_q_hi = mean_est + 1.96*sqrt(vars_est)
pred_q_lo = mean_est - 1.96*sqrt(vars_est)
ggplot(data = data.frame(DaysC, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(mean_est ~ Days)) +
geom_errorbar(aes(ymin = pred_q_lo, ymax = pred_q_hi)))
ggplot(data = data.frame(DaysC, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(mean_est ~ DaysC)) +
geom_errorbar(aes(ymin = pred_q_lo, ymax = pred_q_hi, x = DaysC))
ggplot(data = data.frame(DaysC, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(mean_est ~ DaysC))
c(intervals(lme2a)[[2]][[1]["est."])
ggplot(data = data.frame(DaysC, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(y = mean_est, x = DaysC)) +
geom_errorbar(aes(ymin = pred_q_lo, ymax = pred_q_hi, x = DaysC))
ggplot(data = data.frame(DaysC, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(y = pred_q_lo, x = DaysC)) +
geom_line(aes(y = pred_q_hi, x = DaysC)) +
geom_line(aes(y = mean_est, x = DaysC))
ggplot(data = data.frame(DaysC, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(y = pred_q_lo, x = DaysC)) +
geom_line(aes(y = pred_q_hi, x = DaysC)) +
geom_line(aes(y = mean_est, x = DaysC)) +
ggtitle("Predictive intervals")
Days = 0:9
DaysC = 0:9 - 4.5
mean_est = coeffs[1]    + coeffs[2]    * DaysC
vars_est = ranef_var[1] + ranef_var[2] * DaysC ^ 2 + res_var
pred_q_hi = mean_est + 1.96*sqrt(vars_est)
pred_q_lo = mean_est - 1.96*sqrt(vars_est)
ggplot(data = data.frame(Days, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(y = pred_q_lo, x = Days)) +
geom_line(aes(y = pred_q_hi, x = Days)) +
geom_line(aes(y = mean_est, x = Days)) +
ggtitle("Predictive intervals")
ggplot(data = data.frame(Days, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(y = pred_q_lo, x = Days)) +
geom_line(aes(y = pred_q_hi, x = Days)) +
geom_line(aes(y = mean_est, x = Days)) +
ggtitle("Predictive intervals") + ylab("Reaction time")
lme2c   <- lme(Reaction ~ Days,
random=reStruct(~Days|Subject, pdClass="pdDiag"),
data=sleepstudy) # diagonal G; days not centered
plot_quantiles_p1b(my_lmm = lme2a, my_title = "Days centered")
source('~/Desktop/winter_2016/571/hw/hw8/hw8_code_kernfeld.R')
plot_quantiles_p1b = function(my_lmm, my_title){
coeffs = intervals(my_lmm)$fixed[, 2]
ranef_var = c(intervals(my_lmm)[[2]][[1]]["est."])$est.^2
res_var = intervals(my_lmm)$sigma["est."] ^ 2
Days = 0:9
DaysC = 0:9 - 4.5
mean_est = coeffs[1]    + coeffs[2]    * DaysC
vars_est = ranef_var[1] + ranef_var[2] * DaysC ^ 2 + res_var
pred_q_hi = mean_est + 1.96*sqrt(vars_est)
pred_q_lo = mean_est - 1.96*sqrt(vars_est)
ggplot(data = data.frame(Days, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(y = pred_q_lo, x = Days)) +
geom_line(aes(y = pred_q_hi, x = Days)) +
geom_line(aes(y = mean_est, x = Days)) +
ggtitle(my_title) + ylab("Reaction time (ms)")
}
plot_quantiles_p1b(my_lmm = lme2a, my_title = "Days centered")
plot_quantiles_p1b(my_lmm = lme2c, my_title = "Days not centered")
require(ggplot2)
plot_quantiles_p1b = function(centered = TRUE){
Days = 0:9
if(centered){
sleepstudy$Days = sleepstudy$Days - 4.5
Days = Days - 4.5
}
lme2a   <- lme(Reaction ~ Days,
random=reStruct(~Days|Subject, pdClass="pdDiag"),
data=sleepstudy) # diagonal G
coeffs = intervals(my_lmm)$fixed[, 2]
ranef_var = c(intervals(my_lmm)[[2]][[1]]["est."])$est.^2
res_var = intervals(my_lmm)$sigma["est."] ^ 2
mean_est = coeffs[1]    + coeffs[2]    * Days
vars_est = ranef_var[1] + ranef_var[2] * Days ^ 2 + res_var
pred_q_hi = mean_est + 1.96*sqrt(vars_est)
pred_q_lo = mean_est - 1.96*sqrt(vars_est)
ggplot(data = data.frame(Days, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(y = pred_q_lo, x = Days)) +
geom_line(aes(y = pred_q_hi, x = Days)) +
geom_line(aes(y = mean_est, x = Days)) +
ggtitle(my_title) + ylab("Reaction time (ms)")
}
plot_quantiles_p1b(my_lmm = lme2a, my_title = "Days centered")
plot_quantiles_p1b(my_lmm = lme2c, my_title = "Days not centered")
plot_quantiles_p1b(TRUE)
require(ggplot2)
plot_quantiles_p1b = function(centered = TRUE){
Days = 0:9
if(centered){
sleepstudy$Days = sleepstudy$Days - 4.5
Days = Days - 4.5
}
my_lmm   <- lme(Reaction ~ Days,
random=reStruct(~Days|Subject, pdClass="pdDiag"),
data=sleepstudy) # diagonal G
coeffs = intervals(my_lmm)$fixed[, 2]
ranef_var = c(intervals(my_lmm)[[2]][[1]]["est."])$est.^2
res_var = intervals(my_lmm)$sigma["est."] ^ 2
mean_est = coeffs[1]    + coeffs[2]    * Days
vars_est = ranef_var[1] + ranef_var[2] * Days ^ 2 + res_var
pred_q_hi = mean_est + 1.96*sqrt(vars_est)
pred_q_lo = mean_est - 1.96*sqrt(vars_est)
ggplot(data = data.frame(Days, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(y = pred_q_lo, x = Days)) +
geom_line(aes(y = pred_q_hi, x = Days)) +
geom_line(aes(y = mean_est, x = Days)) +
ggtitle(my_title) + ylab("Reaction time (ms)")
}
plot_quantiles_p1b(centered = TRUE)
source('~/Desktop/winter_2016/571/hw/hw8/hw8_code_kernfeld.R')
plot_quantiles_p1b(centered = TRUE)
plot_quantiles_p1b(centered = FALSE)
plot_quantiles_p1b(centered = TRUE)
print(BIC(my_lmm))
plot_quantiles_p1b(centered = TRUE)
source('~/Desktop/winter_2016/571/hw/hw8/hw8_code_kernfeld.R')
source('~/Desktop/winter_2016/571/hw/hw8/hw8_code_kernfeld.R')
source('~/Desktop/winter_2016/571/hw/hw8/hw8_code_kernfeld.R')
source('~/Desktop/winter_2016/571/hw/hw8/hw8_code_kernfeld.R')
plot_quantiles_p1b(centered = TRUE)
plot_quantiles_p1b(centered = FALSE)
ggplot(data = data.frame(Days, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(y = pred_q_lo, x = Days)) +
geom_line(aes(y = pred_q_hi, x = Days)) +
geom_line(aes(y = mean_est, x = Days)) +
ggtitle(paste("Centered == ", centered)) +
ylab("Reaction time (ms)") + xlab("Day") +
geom_point(aes(y = Reaction, x = DayC), data = sleepstudy)
centered = TRUE
ggplot(data = data.frame(Days, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(y = pred_q_lo, x = Days)) +
geom_line(aes(y = pred_q_hi, x = Days)) +
geom_line(aes(y = mean_est, x = Days)) +
ggtitle(paste("Centered == ", centered)) +
ylab("Reaction time (ms)") + xlab("Day") +
geom_point(aes(y = Reaction, x = DayC), data = sleepstudy)
ggplot(data = data.frame(Days, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(y = pred_q_lo, x = Days)) +
geom_line(aes(y = pred_q_hi, x = Days)) +
geom_line(aes(y = mean_est, x = Days)) +
ggtitle(paste("Centered == ", centered)) +
ylab("Reaction time (ms)") + xlab("Day") +
geom_point(aes(y = Reaction, x = DaysC), data = sleepstudy)
ggplot(data = data.frame(Days, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(y = pred_q_lo, x = Days)) +
geom_line(aes(y = pred_q_hi, x = Days)) +
geom_line(aes(y = mean_est, x = Days)) +
ggtitle(paste("Centered == ", centered)) +
ylab("Reaction time (ms)") + xlab("Day") +
geom_point(aes(y = Reaction, x = Days), data = sleepstudy)
print(paste("When centered == ", centered, "BIC is", BIC(my_lmm)))
source('~/Desktop/winter_2016/571/hw/hw8/hw8_code_kernfeld.R')
plot_quantiles_p1b(centered = TRUE)
plot_quantiles_p1b(centered = FALSE)
plot_quantiles_p1b(centered = FALSE)
plot_quantiles_p1b = function(centered = TRUE){
Days = 0:9
if(centered){
sleepstudy$Days = sleepstudy$Days - 4.5
Days = Days - 4.5
}
my_lmm   <- lme(Reaction ~ Days,
random=reStruct(~Days|Subject, pdClass="pdDiag"),
data=sleepstudy) # diagonal G
coeffs = intervals(my_lmm)$fixed[, 2]
ranef_var = c(intervals(my_lmm)[[2]][[1]]["est."])$est.^2
res_var = intervals(my_lmm)$sigma["est."] ^ 2
mean_est = coeffs[1]    + coeffs[2]    * Days
vars_est = ranef_var[1] + ranef_var[2] * Days ^ 2 + res_var
pred_q_hi = mean_est + 1.96*sqrt(vars_est)
pred_q_lo = mean_est - 1.96*sqrt(vars_est)
ggplot(data = data.frame(Days, mean_est, pred_q_lo, pred_q_hi)) +
geom_line(aes(y = pred_q_lo, x = Days)) +
geom_line(aes(y = pred_q_hi, x = Days)) +
geom_line(aes(y = mean_est, x = Days)) +
ggtitle(paste("Centered == ", centered)) +
ylab("Reaction time (ms)") + xlab("Day") +
geom_point(aes(y = Reaction, x = Days), data = sleepstudy)
print(paste("When centered == ", centered, "BIC is", BIC(my_lmm)))
}
plot_quantiles_p1b(centered = TRUE)
plot_quantiles_p1b(centered = FALSE)
source('~/Desktop/winter_2016/571/hw/hw8/hw8_code_kernfeld.R')
plot_quantiles_p1b(centered = TRUE)
plot_quantiles_p1b(centered = FALSE)
get_p2_coverage = function(n_clusters = 1000,
ni = 5,
sigsq_b = 1,
sigsq_eps = 6){
b = rnorm(n = n_clusters, mean = 0, sd = sqrt(sigsq_b))
eps = rnorm(n = ni * n_clusters, mean = 0, sd = sqrt(sigsq_eps))
y = rep(b, each = ni) + eps
id = rep(1:n, each = ni)
lmm = lmer(formula = y ~ 1 + (1|b))
blup = ranef(lmm) #BLOOOOP
P = mean(abs(b - blup) < se.ranef(lmm))
}
get_p2_coverage = function(n_clusters = 1000,
ni = 5,
sigsq_b = 1,
sigsq_eps = 6){
b = rnorm(n = n_clusters, mean = 0, sd = sqrt(sigsq_b))
eps = rnorm(n = ni * n_clusters, mean = 0, sd = sqrt(sigsq_eps))
y = rep(b, each = ni) + eps
id = rep(1:n, each = ni)
lmm = lmer(formula = y ~ 1 + (1|b))
P = mean(abs(b - blup) < se.ranef(lmm))
return(P)
}
blup = ranef(lmm) #BLOOOOP
get_p2_coverage = function(n_clusters = 1000,
ni = 5,
sigsq_b = 1,
sigsq_eps = 6){
b = rnorm(n = n_clusters, mean = 0, sd = sqrt(sigsq_b))
eps = rnorm(n = ni * n_clusters, mean = 0, sd = sqrt(sigsq_eps))
y = rep(b, each = ni) + eps
id = rep(1:n, each = ni)
lmm = lmer(formula = y ~ 1 + (1|b))
blup = ranef(lmm) #BLOOOOP
P = mean(abs(b - blup) < se.ranef(lmm))
return(P)
}
get_p2_coverage()
get_p2_coverage = function(n_clusters = 1000,
ni = 5,
sigsq_b = 1,
sigsq_eps = 6){
b = rnorm(n = n_clusters, mean = 0, sd = sqrt(sigsq_b))
eps = rnorm(n = ni * n_clusters, mean = 0, sd = sqrt(sigsq_eps))
y = rep(b,             each = ni) + eps
id = rep(1:n_clusters, each = ni)
lmm = lmer(formula = y ~ 1 + (1|b))
blup = ranef(lmm) #BLOOOOP
P = mean(abs(b - blup) < se.ranef(lmm))
return(P)
}
source('~/Desktop/winter_2016/571/hw/hw8/hw8_code_kernfeld.R')
n_clusters = 1000
ni = 5
sigsq_b = 1
sigsq_eps = 6
b = rnorm(n = n_clusters, mean = 0, sd = sqrt(sigsq_b))
eps = rnorm(n = ni * n_clusters, mean = 0, sd = sqrt(sigsq_eps))
y = rep(b,             each = ni) + eps
id = rep(1:n_clusters, each = ni)
lmm = lmer(formula = y ~ 1 + (1|b))
y
b
source('~/Desktop/winter_2016/571/hw/hw8/hw8_code_kernfeld.R')
source('~/Desktop/winter_2016/571/hw/hw8/hw8_code_kernfeld.R')
n_clusters = 1000
ni = 5
sigsq_b = 1
sigsq_eps = 6
eps = rnorm(n = ni * n_clusters, mean = 0, sd = sqrt(sigsq_eps))
b = rnorm(n = n_clusters, mean = 0, sd = sqrt(sigsq_b))
b = rep(b, each = ni)
id = rep(1:n_clusters, each = ni)
y = b + eps
lmm = lmer(formula = y ~ 1 + (1|b))
blup = ranef(lmm) #BLOOOOP
P = mean(abs(b - blup) < se.ranef(lmm))
blup
names(blup)
summary(blup)
head(blup)
head(blup[[1]])
blup[[1]]
length(blup)
length(blup[[1]])
length(blup[[1]][[1]])
source('~/Desktop/winter_2016/571/hw/hw8/hw8_code_kernfeld.R')
n_clusters = 1000
ni = 5
sigsq_b = 1
sigsq_eps = 6
eps = rnorm(n = ni * n_clusters, mean = 0, sd = sqrt(sigsq_eps))
lil_b = rnorm(n = n_clusters, mean = 0, sd = sqrt(sigsq_b))
b = rep(lil_b, each = ni)
id = rep(1:n_clusters, each = ni)
y = b + eps
lmm = lmer(formula = y ~ 1 + (1|b))
blup = ranef(lmm)[[1]][[1]] #BLOOOOP
P = mean(abs(lil_b - blup) < se.ranef(lmm))
arm::se.ranef
require(arm)
se.ranef(lmm)
install.packages("arm")
blup = ranef(lmm)[[1]][[1]] #BLOOOOP
P = mean(abs(lil_b - blup) < arm::se.ranef(lmm))
arm::se.ranef(lmm)
names(arm::se.ranef(lmm))
names(arm::se.ranef(lmm)[[1]])
arm::se.ranef(lmm)[[1]]
arm::se.ranef(lmm)[[1]][[1]]
dim(arm::se.ranef(lmm)[[1]])
summary(arm::se.ranef(lmm)[[1]])
?arm::se.ranef
arm::se.ranef(lmm)
mean(arm::se.ranef(lmm))
arm::se.ranef(lmm)[[1]]
mean(arm::se.ranef(lmm)[[1]])
source('~/Desktop/winter_2016/571/hw/hw8/hw8_code_kernfeld.R')
lmm
n_clusters = 1000
ni = 5
sigsq_b = 1
sigsq_eps = 6
eps = rnorm(n = ni * n_clusters, mean = 0, sd = sqrt(sigsq_eps))
lil_b = rnorm(n = n_clusters, mean = 0, sd = sqrt(sigsq_b))
b = rep(lil_b, each = ni)
id = rep(1:n_clusters, each = ni)
y = b + eps
lmm = lme4::lmer(formula = y ~ 1 + (1|b))
blup = ranef(lmm)[[1]][[1]] #BLOOOOP
sigsq_y_est =
sigsq_b_est =
#Doing the intervals by hand; can't figure out `arm` and the help file is sparse as fuck.
lmm
sigma(lmm)
ranef(lmm)
lmm
lmm[[1]]
lmm@theta
lmm@Gp
intervals(lmm)
?lmm
typeof(lmm)
lmm
vcov(lmm)
anova(lmm)
lmm
prt-utilities
varcor(lmm)
varcov(lmm)
lmm
VarCorr(lmm)
VarCorr(lmm)[[1]]
c(VarCorr(lmm))
VarCorr(lmm)[2]
VarCorr(lmm)[[2]]
VarCorr(lmm)[[1]]
VarCorr(lmm)[[1]][[1]]
sigma(lmm)
lmm
VarCorr(lmm)[[1]][[1]]
1.044^2
1.090441
1.090441^2
sqrt(1.090441)
lmm
source('~/Desktop/winter_2016/571/hw/hw8/hw8_code_kernfeld.R')
get_p2_coverage()
get_p2_coverage()
get_p2_coverage()
png("QQ_ranef.png")
qqnorm(ranef(glmm_fit)[[1]][[1]], main = "random effects distribution")
dev.off()
png("resids_by_fitted_val.png")
require(lme4)
png("QQ_ranef.png")
qqnorm(ranef(glmm_fit)[[1]][[1]], main = "random effects distribution")
dev.off()
xerop <- read.csv("~/Desktop/winter_2016/571/hw/hw8/xerop.csv")
sin(0.5*pi*(time+1))
cos(0.5*pi*(time+1))
plot( (season - 2.5)/1.5 ~ time, data = xerop)
points( sin(0.5*pi*(time+1)) ~ time, data = xerop, col = "red")
points( cos(0.5*pi*(time+1)) ~ time, data = xerop, col = "blue")
require(geeM)
require(xtable)
gee_fit = geeM::geem(formula = respinfect ~ 1 + sex + ht.for.age +
cos(0.5*pi*(time+1)) + sin(0.5*pi*(time+1)) +
xerop + poly(age, 2),
data = xerop,
family = binomial(),
id = "id")
varname = c("(intercept)", "sex", "hfora", "cos", "sin", "xero", "age", "agesq")
xtable(data.frame(varname, coeff = gee_fit$beta,
se = sqrt(diag(gee_fit$var))))
glmm_fit = lme4::glmer(formula = respinfect ~ (1|id) + 1 + sex + ht.for.age +
cos(0.5*pi*(time+1)) + sin(0.5*pi*(time+1)) +
xerop + poly(age, 2),
data = xerop,
family = binomial(),
control=glmerControl(optCtrl=list(maxfun=4000)))
varname = c("(intercept)", "sex", "hfora", "cos", "sin", "xero", "age", "agesq")
xtable(data.frame(varname, coeff = glmm_fit@beta,
se = sqrt(diag(vcov(glmm_fit)))))
#==========P4: GLMM diagnostics ===============
png("QQ_ranef.png")
qqnorm(ranef(glmm_fit)[[1]][[1]], main = "random effects distribution")
dev.off()
qqnorm(ranef(glmm_fit)[[1]][[1]], main = "random effects distribution")
png("resids_by_fitted_val.png")
plot(fitted.values(glmm_fit), residuals(glmm_fit), main = "Residuals by fitted value")
dev.off()
plot(fitted.values(glmm_fit), residuals(glmm_fit), main = "Residuals by fitted value")
qqnorm(ranef(glmm_fit)[[1]][[1]], main = "random effects distribution")
rm(list = ls())
PATH_TO_THIS_FILE = "~/Desktop/winter_2016/consulting/Leah Perlmutter (cs)/transparency_analysis/analysis_code/"
warning(paste("The path", PATH_TO_THIS_FILE, "should point to transparency_analysis_functions.Rmd and transparency_analysis_script.Rmd."))
setwd(PATH_TO_THIS_FILE)
require(knitr)
knitr::purl("transparency_analysis_functions.Rmd")
source("transparency_analysis_functions.R")
get_effect_sizes(output_format = "latex")
print_tests_A1A2()
print_tests_A1A2(output_format = "latex")
print_tests_A1A2(output_format = "latex")
get_effect_sizes(output_format = "latex")
