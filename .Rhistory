test_stats = rep(NA, num_draws)
for(i in seq_along(test_stats)){
test_stats[i] = get_test_stat(wideeducation[sample(28), ])
}
hist(test_stats)
return(test_stats)
}
bootstrap_educ(1e3)
wideeducation <- read.csv("~/Desktop/winter_2016/571/hw/hw2/wideeducation.txt", sep="")
get_test_stat = function(df_with_group){
m0 = mean(c(unlist(df_with_group[df_with_group$group == 0,])), na.rm = TRUE)
m1 = mean(c(unlist(df_with_group[df_with_group$group == 1,])), na.rm = TRUE)
return(m1 - m0)
}
bootstrap_educ = function(num_draws){
test_stats = rep(NA, num_draws)
for(i in seq_along(test_stats)){
test_stats[i] = get_test_stat(wideeducation[sample(28, replace = TRUE), ])
}
hist(test_stats)
return(test_stats)
}
bootstrap_educ(1e3)
wideeducation <- read.csv("~/Desktop/winter_2016/571/hw/hw2/wideeducation.txt", sep="")
get_test_stat = function(df_with_group){
g0 = c(unlist(df_with_group[df_with_group$group == 0,]))
g1 = c(unlist(df_with_group[df_with_group$group == 1,]))
t0 = mean(g0, na.rm = TRUE) / sd(g0, na.rm = TRUE)
t1 = mean(g1, na.rm = TRUE) / sd(g1, na.rm = TRUE)
return(t1 - t0)
}
bootstrap_educ = function(num_draws){
test_stats = rep(NA, num_draws)
for(i in seq_along(test_stats)){
test_stats[i] = get_test_stat(wideeducation[sample(28, replace = TRUE), ])
}
hist(test_stats)
return(test_stats)
}
bootstrap_educ(1e3)
wideeducation <- read.csv("~/Desktop/winter_2016/571/hw/hw2/wideeducation.txt", sep="")
get_test_stat = function(df_with_group){
g0 = c(unlist(df_with_group[df_with_group$group == 0,]))
g1 = c(unlist(df_with_group[df_with_group$group == 1,]))
t0 = mean(g0, na.rm = TRUE) / sd(g0, na.rm = TRUE)
t1 = mean(g1, na.rm = TRUE) / sd(g1, na.rm = TRUE)
return(t1 - t0)
}
bootstrap_educ = function(num_draws){
test_stats = rep(NA, num_draws)
for(i in seq_along(test_stats)){
test_stats[i] = get_test_stat(wideeducation[sample(28, replace = TRUE), ])
}
hist(test_stats, breaks = 30)
return(test_stats)
}
bootstrap_educ(1e3)
bootstrap_educ(1e4)
bootstrap_educ(1e3)
wideeducation <- read.csv("~/Desktop/winter_2016/571/hw/hw2/wideeducation.txt", sep="")
get_test_stat = function(df_with_group){
g0 = c(unlist(df_with_group[df_with_group$group == 0,]))
g1 = c(unlist(df_with_group[df_with_group$group == 1,]))
t0 = mean(g0, na.rm = TRUE)
t1 = mean(g1, na.rm = TRUE)
return(t1 - t0)
}
bootstrap_educ = function(num_draws){
test_stats = rep(NA, num_draws)
for(i in seq_along(test_stats)){
test_stats[i] = get_test_stat(wideeducation[sample(28, replace = TRUE), ])
}
hist(test_stats, breaks = 30)
return(test_stats)
}
bootstrap_educ(1e3)
bootstrap_educ(1e4)
wideeducation <- read.csv("~/Desktop/winter_2016/571/hw/hw2/wideeducation.txt", sep="")
get_test_stat = function(df_with_group){
g0 = c(unlist(df_with_group[df_with_group$group == 0,]))
g1 = c(unlist(df_with_group[df_with_group$group == 1,]))
t0 = mean(g0, na.rm = TRUE)
t1 = mean(g1, na.rm = TRUE)
return(t1 - t0)
}
bootstrap_educ = function(num_draws){
test_stats = rep(NA, num_draws)
for(i in seq_along(test_stats)){
df = wideeducation[sample(28, replace = TRUE), ]
df$group = rbinom(n = 28, size = 1, prob = 0.5)
test_stats[i] = get_test_stat(df)
}
hist(test_stats, breaks = 30)
return(test_stats)
}
bootstrap_educ(1e3)
bootstrap_educ(1e4)
wideeducation <- read.csv("~/Desktop/winter_2016/571/hw/hw2/wideeducation.txt", sep="")
get_test_stat = function(df_with_group){
g0 = c(unlist(df_with_group[df_with_group$group == 0,]))
g1 = c(unlist(df_with_group[df_with_group$group == 1,]))
t0 = mean(g0, na.rm = TRUE)
t1 = mean(g1, na.rm = TRUE)
return(t1 - t0)
}
bootstrap_educ = function(num_draws){
test_stats = rep(NA, num_draws)
for(i in seq_along(test_stats)){
df = wideeducation[sample(28, replace = TRUE), ]
test_stats[i] = get_test_stat(df)
}
hist(test_stats, breaks = 30)
return(test_stats)
}
bootstrap_educ(1e3)
bootstrap_educ(1e4)
df_with_group$group == 1
df_with_group[df_with_group$group == 1,-c(1,2)]
unlist(df_with_group[df_with_group$group == 1,-c(1,2)])
wideeducation <- read.csv("~/Desktop/winter_2016/571/hw/hw2/wideeducation.txt", sep="")
get_test_stat = function(df_with_group){
g0 = c(unlist(df_with_group[df_with_group$group == 0,-c(1,2)]))
g1 = c(unlist(df_with_group[df_with_group$group == 1,-c(1,2)]))
t0 = mean(g0, na.rm = TRUE)
t1 = mean(g1, na.rm = TRUE)
return(t1 - t0)
}
bootstrap_educ = function(num_draws){
test_stats = rep(NA, num_draws)
for(i in seq_along(test_stats)){
df = wideeducation[sample(28, replace = TRUE), ]
test_stats[i] = get_test_stat(df)
}
hist(test_stats, breaks = 30)
return(test_stats)
}
bootstrap_educ(1e3)
bootstrap_educ(1e4)
quantile(0.025, bootstrap_educ(1e3))
quantile(bootstrap_educ(1e3), 0.025)
quantile(bootstrap_educ(1e3), 0.025)
quantile(bootstrap_educ(1e3), 0.025)
quantile(bootstrap_educ(1e3), c(0.025, 0.975))
quantile(bootstrap_educ(1e3), c(0.025, 0.975))
quantile(bootstrap_educ(1e4), 0.025)
quantile(bootstrap_educ(1e4), c(0.025, 0.975))
quantile(bootstrap_educ(1e4), c(0.025, 0.975))
?sandwich
?sandwich::sandwich
?sandwich::bread.
?sandwich::bread
wideeducation <- read.csv("~/Desktop/winter_2016/571/hw/hw2/wideeducation.txt", sep="")
get_test_stat = function(df_with_group){
g0 = c(unlist(df_with_group[df_with_group$group == 0,-c(1,2)]))
g1 = c(unlist(df_with_group[df_with_group$group == 1,-c(1,2)]))
t0 = mean(g0, na.rm = TRUE)
t1 = mean(g1, na.rm = TRUE)
return(t1 - t0)
}
bootstrap_educ = function(num_draws){
test_stats = rep(NA, num_draws)
for(i in seq_along(test_stats)){
df = wideeducation[sample(28, replace = TRUE), ]
test_stats[i] = get_test_stat(df)
}
hist(test_stats, breaks = 30)
return(test_stats)
}
bootstrap_educ(1e3)
bootstrap_educ(1e4)
#Run this a few times by hand
quantile(bootstrap_educ(1e3), c(0.025, 0.975))
quantile(bootstrap_educ(1e4), c(0.025, 0.975))
#load data and ensure treatment is encoded as a factor
leprosy <- read.csv("~/Desktop/winter_2016/571/hw/hw2/leprosy.txt", sep="")
trt_names = c("Placebo", "A", "B")
for(trt_index in 1:3){
leprosy$trt[leprosy$trt == trt_index] <- trt_names[trt_index]
}
leprosy$trt <- as.factor(leprosy$trt)
#convert to long format
#add a factor to describe baseline (for everyone) versus post-treatment rows (split up by treatment type)
leprosy_long = reshape2::melt(leprosy, id.vars = c("trt", "severe"))
leprosy_long_nice = data.frame(severity = leprosy_long$severe)
leprosy_long_nice$silly_bacilli = leprosy_long$value
leprosy_long_nice$trt_by_time = NA
before_inds = leprosy_long$variable=="count1"
after_inds  = leprosy_long$variable=="count2"
leprosy_long_nice$trt_by_time[before_inds] = "Baseline"
leprosy_long_nice$trt_by_time[after_inds ] = as.character(leprosy_long$trt[after_inds])
leprosy_long_nice$trt_by_time = factor(leprosy_long_nice$trt_by_time, levels = c("Baseline", "A", "B", "Placebo"))
summary(leprosy_long_nice)
head(leprosy_long_nice)
#Fit linear model, controlling for severity
get_beta = function(leprosy_data_possibly_resampled, control_for_severity){
if(control_for_severity){
my_formula = silly_bacilli ~ trt_by_time + severity
} else{
my_formula = silly_bacilli ~ trt_by_time
}
quasi_poi_mod = glm(formula = my_formula,
data = leprosy_data_possibly_resampled,
family = quasipoisson())
return(quasi_poi_mod$coefficients)
}
#Get sandwich covariance estimate for beta
get_beta_sandwich_cov = function(){
quasi_poi_mod = glm(formula = silly_bacilli ~ trt_by_time, data = leprosy_long_nice, family = quasipoisson())
beta_cov = sandwich::sandwich(x = quasi_poi_mod)
return(beta_cov)
}
#Maps beta to theta
get_theta = function(beta){
phi = exp(beta)
theta = c(phi[1], phi[2], phi[3]/phi[2], phi[4]/phi[2])
return(theta)
}
#Maps cov(beta) to cov(gam)
get_gam_cov = function(beta_cov, beta){
gam = beta - c(0, 0, beta[2], beta[2])
dgam_dbeta = diag(c(1, 1, 1, 1))
dgam_dbeta[3, 2] = -1
dgam_dbeta[4, 2] = -1
gam_cov = dgam_dbeta %*% beta_cov %*% t(dgam_dbeta)
return(gam_cov)
}
#Resamples the leprosy data on the level of patients.
#This allows situations where more or fewer than 10 patients are assigned to a given treatment category.
#But, it does not mix together "before" and "after" data from different patients.
resample_leprosy = function(){
inds = sample(30, replace = TRUE)
return(leprosy_long_nice[c(inds, 30 + inds),])
}
get_theta(get_beta(leprosy_data_possibly_resampled = leprosy_long_nice, control_for_severity = TRUE))
get_theta(get_beta(leprosy_data_possibly_resampled = leprosy_long_nice, control_for_severity = FALSE))
require(ggplot2)
leprosy_bootstrap_CI = function(num_samples = 1e3){
bootstrap_thetas = data.frame(theta0 = numeric(num_samples), theta1 = NA, theta2 = NA, theta3 = NA)
for(i in 1:num_samples){
bootstrap_thetas[i, ] = get_theta(get_beta(resample_leprosy(), control_for_severity = FALSE))
}
return(bootstrap_thetas)
}
#For a dataframe of bootstrap outputs, form CIs and histograms for each column.
process_boostrap_output = function(output){
ggplot(data = reshape2::melt(output)) + geom_histogram(aes(value)) + facet_wrap(~variable, scales = "free_x")
marginal_CIs = as.list(colnames(output))
names(marginal_CIs) = colnames(output)
for(i in seq_along(colnames(output))){
marginal_CIs[[i]] = c(quantile(output[,i], 0.025),
quantile(output[,i], 0.975))
}
return(marginal_CIs)
}
bootstrap_thetas = leprosy_bootstrap_CI()
process_boostrap_output(bootstrap_thetas)
beta_est = get_beta(leprosy_data_possibly_resampled = leprosy_long_nice, control_for_severity = FALSE)
theta_est = get_theta(beta)
gam_est = log(theta_est)
beta_cov_est = get_beta_sandwich_cov()
gam_sandwich_cov = get_gam_cov(beta_cov_est, beta_est)
gam_sandwich_sd = sqrt(diag(gam_sandwich_cov))
gam_sandwich_CIs = as.list(1:4)
names(gam_sandwich_CIs) = paste0("gamma_", 0:3)
for(i in seq_along(gam_sandwich_sd)){
gam_sandwich_CIs[[i]] = gam_sandwich_sd[[i]]*1.96*c(-1, 1) + gam_est[[i]]
}
theta_sandwich_CIs = as.list(1:4)
names(gam_sandwich_CIs) = paste0("theta_", 0:3)
for(i in seq_along(theta_sandwich_sd)){
theta_sandwich_CIs[[i]] = exp(gam_sandwich_CIs[[i]])
}
print(theta_sandwich_CIs)
beta_est
typeof(beta_est)
theta_est = get_theta(beta)
beta_est = get_beta(leprosy_data_possibly_resampled = leprosy_long_nice, control_for_severity = FALSE)
theta_est = get_theta(beta_est)
gam_est = log(theta_est)
beta_cov_est = get_beta_sandwich_cov()
gam_sandwich_cov = get_gam_cov(beta_cov_est, beta_est)
gam_sandwich_sd = sqrt(diag(gam_sandwich_cov))
gam_sandwich_CIs = as.list(1:4)
names(gam_sandwich_CIs) = paste0("gamma_", 0:3)
for(i in seq_along(gam_sandwich_sd)){
gam_sandwich_CIs[[i]] = gam_sandwich_sd[[i]]*1.96*c(-1, 1) + gam_est[[i]]
}
theta_sandwich_CIs = as.list(1:4)
names(gam_sandwich_CIs) = paste0("theta_", 0:3)
for(i in seq_along(theta_sandwich_sd)){
theta_sandwich_CIs[[i]] = exp(gam_sandwich_CIs[[i]])
}
print(theta_sandwich_CIs)
beta_est = get_beta(leprosy_data_possibly_resampled = leprosy_long_nice, control_for_severity = FALSE)
theta_est = get_theta(beta_est)
gam_est = log(theta_est)
beta_cov_est = get_beta_sandwich_cov()
gam_sandwich_cov = get_gam_cov(beta_cov_est, beta_est)
gam_sandwich_sd = sqrt(diag(gam_sandwich_cov))
gam_sandwich_CIs = as.list(1:4)
names(gam_sandwich_CIs) = paste0("gamma_", 0:3)
for(i in seq_along(gam_sandwich_sd)){
gam_sandwich_CIs[[i]] = gam_sandwich_sd[[i]]*1.96*c(-1, 1) + gam_est[[i]]
}
theta_sandwich_CIs = as.list(1:4)
names(theta_sandwich_CIs) = paste0("theta_", 0:3)
for(i in seq_along(theta_sandwich_sd)){
theta_sandwich_CIs[[i]] = exp(gam_sandwich_CIs[[i]])
}
print(theta_sandwich_CIs)
for(i in seq_along(theta_sandwich_CIs)){
theta_sandwich_CIs[[i]] = exp(gam_sandwich_CIs[[i]])
}
print(theta_sandwich_CIs)
getwd()
setwd("Desktop/winter_2016/consulting/Leah Perlmutter (cs)/transparency_analysis/analysis_code/")
participant_ids <- read.table("~/Desktop/winter_2016/consulting/Leah Perlmutter (cs)/transparency_analysis/data/participant_ids.csv", quote="\"", comment.char="")
View(participant_ids)
participant_ids <- read.table("../data/participant_ids.csv")
participant_ids
participant_ids
mode()
4 % 3
4 %% 3
participant_ids = read.table("../data/participant_ids.csv")$V1
subject_ids_monitor_first = participant_ids[participant_ids != 5 | participant_ids %% 2 == 1]
subject_ids_oculus_first = participant_ids[participant_ids == 5 | participant_ids %% 2 == 0]
subject_ids_monitor_first
participant_ids != 5
subject_ids_oculus_first
subject_ids_monitor_first
subject_ids_monitor_first = participant_ids[participant_ids != 5 & participant_ids %% 2 == 1]
subject_ids_monitor_first
require(lmer)
require(lmerTest)
install.packages("lmer")
install.packages("lmerTest")
lmer::lme4()
require(lmer)
require(lmerTest)
require(lme4)
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
lme4::lmer
?lmer
?lmerTest::anova
?anove
?anova
?lmerTest::anova
?lmerTest::anova()
lmerTest::anova()
lmerTest::anova
showMethods("anova")
wide_data = cbind(ids, rep(1:6, each = 20))
ids = read.table("../data/ids.csv")$V1
PATH_TO_THIS_REPO = "~/Desktop/winter_2016/consulting/Leah Perlmutter (cs)/transparency_analysis/"
setwd(PATH_TO_THIS_REPO)
ids = read.table("data/ids.csv")$V1
ids = read.table("/data/ids.csv")$V1
PATH_TO_THIS_REPO = "~/Desktop/winter_2016/consulting/Leah Perlmutter (cs)/transparency_analysis/"
setwd(PATH_TO_THIS_REPO)
ids = read.table("data/ids.csv")$V1
getwd()
ids = read.table("data/participant_ids.csv")$V1
ids_monitor_first = ids[ids != 5 & ids %% 2 == 1]
ids_oculus_first = ids[ids == 5 | ids %% 2 == 0]
print("Monitor first:")
print(ids_monitor_first)
print("Oculus first:")
print(ids_oculus_first)
binary_metrics = c("language_helped", "pointing_helped", "task_completed") #or something like that
wide_data = data,frame(cbind(ids, rep(1:6, each=20)))
wide_data = data.frame(cbind(ids, rep(1:6, each=20)))
wide_data
wide_data = data.frame(cbind(ids, matrix(rep(1:6, each=20), nrow = 20)))
wide_data
long_data = reshape2::melt(wide_data, id.vars = "ids") #fill in name of i and j variables
long_data_nice$task_metric = long_data$value
if(task_metric %in% binary_metrics){
long_data_nice$log_task_metric = log(long_data_nice$task_metric)
long_data = reshape2::melt(wide_data, id.vars = "ids") #fill in name of i and j variables
long_data
long_data$variable==1
long_data$variable==2
long_data$variable==3
long_data$variable==V3
long_data$variable=="V3"
long_data_nice$task_metric = long_data$value
long_data_nice = data.frame()
long_data_nice$task_metric = long_data$value
long_data_nice = data.frame(numeric(120))
long_data_nice$task_metric = long_data$value
if(task_metric %in% binary_metrics){
long_data_nice$log_task_metric = log(long_data_nice$task_metric)
}
task_metric = "language_helped"
binary_metrics = c("language_helped", "pointing_helped", "task_completed") #or something like that
if(task_metric %in% binary_metrics){
long_data_nice$log_task_metric = log(long_data_nice$task_metric)
}
long_data_nice
if(~ task_metric %in% binary_metrics){
long_data_nice$log_task_metric = log(long_data_nice$task_metric)
}
if(~ (task_metric %in% binary_metrics)){
long_data_nice$log_task_metric = log(long_data_nice$task_metric)
}
task_metric %in% binary_metrics
if(! task_metric %in% binary_metrics ){
long_data_nice$log_task_metric = log(long_data_nice$task_metric)
}
! task_metric %in% binary_metrics
long_data_nice$learning_23 = ( long_data_nice$ids %in% ids_oculus_first ) &  ( long_data_nice$j??? %in% 3:4 )
all(names(wide_data) %in% condition_names)
condition_names = c("baseline_P1", "baseline_P2",
"monitor_P1",  "monitor_P2",
"oculus_P1",   "oculus_P2")
assertthat::assert_that(all(names(wide_data) %in% condition_names))
?lme4::lmer
fitted_mod = lme4::lmer(data = long_data,
formula = my_formula,
family = quasibinomial())
fitted_mod = lme4::lmer(data = long_data, formula = my_formula)
my_formula = log_task_metric ~ (1|ids) + condition + learning_23
fitted_mod = lme4::lmer(data = long_data, formula = my_formula)
?glmer
f1 = x ~
f1 = ~x
f2 = ~c
f3 = f1 ~ f2
f3
rm(list = ls()) #clear namespace
PATH_TO_THIS_REPO = "~/Desktop/winter_2016/consulting/Leah Perlmutter (cs)/transparency_analysis/"
setwd(PATH_TO_THIS_REPO)
require(lme4)
require(lmerTest)
require(assertthat)
ids = read.table("data/participant_ids.csv")$V1
ids_monitor_first = ids[ids != 5 & ids %% 2 == 1]
ids_oculus_first = ids[ids == 5 | ids %% 2 == 0]
print("Monitor first:")
print(ids_monitor_first)
print("Oculus first:")
print(ids_oculus_first)
binary_metrics = c("language_helped",
"pointing_helped",
"accuracy")
task_metrics = c(binary_metrics,
"number_of_words",
"attempt_times",
"number_of_attempts")
condition_names = c("baseline_P1", "baseline_P2",
"monitor_P1",  "monitor_P2",
"oculus_P1",   "oculus_P2")
get_long_format_data = function(task_metric){
#load, reshape, and give meaningful names
wide_data = read.csv(file = paste0("data/response/", task_metric, ".csv"), comment.char = "#")
assertthat::assert_that(all( names(wide_data) == c("ids", condition_names) ))
long_data = reshape2::melt(wide_data, id.vars = "ids")
long_data_nice = data.frame(numeric(120))
long_data_nice$task_metric = long_data$value
long_data_nice$condition = long_data$variable
#get total trials for binary and log responses for non-binary
if(task_metric %in% binary_metrics ){
long_data_nice$num_actions =
5 *(long_data_nice$condition %in% c("baseline_P2", "monitor_P2", "oculus_P2")) +
10*(long_data_nice$condition %in% c("baseline_P1", "monitor_P1", "oculus_P1"))
} else {
long_data_nice$log_task_metric = log(long_data_nice$task_metric)
}
# Xij = 1 if j = 3, 4 and person i used the monitor last, oculus first
# Xij = 1 if j = 5, 6 and person i used the oculus last, monitor first
# 0 otherwise
long_data_nice$learning_23 = ( long_data_nice$ids %in% ids_oculus_first ) &
( long_data_nice$condition %in% c("monitor_P1", "monitor_P2") )
long_data_nice$learning_23 = ( long_data_nice$ids %in% ids_monitor_first ) &
( long_data_nice$condition %in% c("oculus_P1", "oculus_P2") )
# Xij' = 1 if j = 3, 4, 5, 6
# 0 otherwise
X_prime_ij = long_data_nice$condition %in% c("monitor_P1", "monitor_P2", "oculus_P1", "oculus_P2")
long_data_nice$learning_123 = X_prime_ij + long_data_nice$learning_23
return(long_data_nice)
}
fit_and_test = function(task_metric, which_analysis){
# We model the log task metric for non-binary data and
# the "successes" versus "failures" for binary data
if(task_metric %in% binary_metrics){
response_formula = ~ cbind(task_metric, num_actions - task_metric)
} else{
response_formula = ~ log_task_metric
}
# specify form of model, varying learning effect based on which analysis we're doing
assertthat::assert_that(which_analysis %in% 1:2)
if(which_analysis==1){
my_formula = response_formula ~ (1|ids) + condition + learning_23
}
if(which_analysis==2){
my_formula = response_formula ~ (1|ids) + condition + learning_123
}
long_data = get_long_format_data(task_metric)
# call either linear regression (non-binary) or quasi-binomial regression (binary)
if(task_metric %in% binary_metrics){
fitted_mod = lme4::glmer(data = long_data, formula = my_formula,
family = quasibinomial())
} else{
fitted_mod = lme4::lmer (data = long_data, formula = my_formula)
}
print("Model summary with p-values:")
lmerTest::summary(fitted_mod)
return(fitted_mod)
}
